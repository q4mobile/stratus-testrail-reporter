import { getInput, setFailed, getMultilineInput } from "@actions/core";
import { isEmpty } from "lodash";
import moment from "moment-timezone";
import TestRailApiClient, { IMilestone, INewTestRun } from "testrail-api";
import {
  createTestPlan,
  createTestRun,
  extractError,
  getTestRailMilestone,
  readFiles,
} from "./utils";

const environment = process.env.NODE_ENV || "debug";

export enum InputKey {
  RegressionBranch = "regression_branch",
  TargetBranch = "target_branch",
}

export async function run(): Promise<void> {
  const regressionBranch = getInput(InputKey.RegressionBranch) || "staging";
  const regressionMode = getInput(InputKey.TargetBranch) === regressionBranch;
  const reportFiles: string[] = getMultilineInput("report_files");
  const projectId = parseInt(getInput("project_id"), 10);
  const suiteId = parseInt(getInput("suite_id"), 10);
  const testRailOptions = {
    host: getInput("network_url"),
    user: getInput("username"),
    password: getInput("api_key"),
  };

  const testRailClient = new TestRailApiClient(testRailOptions);
  const testRailResults = await readFiles(reportFiles);
  let testRailMilestone: IMilestone;
  if (isEmpty(testRailResults)) {
    setFailed("No TestRail results were found.");
    return;
  }

  if (regressionMode) {
    testRailMilestone = await getTestRailMilestone(testRailClient, projectId);
  }

  const {
    body: { name: suiteName },
  } = await testRailClient.getSuite(suiteId);

  testRailClient
    .getUserByEmail(testRailOptions.user)
    .then((userResponse) => {
      const { id: userId } = userResponse.body ?? {};

      const milestoneId = isEmpty(testRailMilestone) ? null : testRailMilestone.id;
      const testRunOptions: INewTestRun = {
        suite_id: suiteId,
        // @ts-ignore because milestone is not required
        milestone_id: milestoneId,
        name: `${suiteName}[${environment}][${moment()
          .tz("America/New_York")
          .format("YYYY-MM-DD h:mm:ss")}] Automated Test Run`,
        description: "This test run was automatically generated by Github Actions.",
        include_all: true,
        assignedto_id: userId,
      };

      const testPlanOptions = {
        milestone_id: milestoneId,
        name: `${suiteName}[${environment}][${moment()
          .tz("America/New_York")
          .format("YYYY-MM-DD h:mm:ss")}] Automated Test Plan`,
        entries: [testRunOptions],
      };

      if (regressionMode) {
        createTestPlan(testRailClient, projectId, testPlanOptions, testRailResults, true);
      } else {
        createTestRun(testRailClient, projectId, testRunOptions, testRailResults, false);
      }
    })
    .catch((error: any) => {
      setFailed(`Failed to get TestRail user: ${extractError(error)}`);
    });
}
