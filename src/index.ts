import {
  getInput,
  setOutput,
  setFailed,
  getMultilineInput,
  error as logError,
} from "@actions/core";
import { promises as fs } from "fs";
import { isEmpty } from "lodash";
import moment from "moment-timezone";
import TestrailApiClient, { INewTestResult, INewTestRun } from "testrail-api";

const environment = process.env.NODE_ENV || "debug";

async function run(): Promise<void> {
  async function readFiles(filePaths: string[]): Promise<INewTestResult[]> {
    return new Promise((resolve) => {
      let testrailResults: INewTestResult[] = [];

      const promises = filePaths.map((filePath) => {
        return fs
          .readFile(filePath, "utf-8")
          .then((fileResults) => {
            try {
              const results = JSON.parse(fileResults);
              testrailResults = testrailResults.concat(results);
            } catch (error: any) {
              logError(`Parsing report file has failed: ${error.message}`);
              resolve([]);
            }
          })
          .catch((error: any) => {
            logError(`Reading report file has failed:: ${error.message}`);
            resolve([]);
          });
      });

      Promise.all(promises)
        .then(() => {
          resolve(testrailResults);
        })
        .catch((error: any) => {
          setFailed(error.message);
          resolve([]);
        });
    });
  }

  function extractError(error: any): string {
    if (isEmpty(error)) return "An error is present, but could not be parsed";

    return error.error || error.message?.error || error.message || JSON.stringify(error);
  }

  const reportFiles: string[] = getMultilineInput("report_files");
  const projectId = parseInt(getInput("project_id"), 10);
  const suiteId = parseInt(getInput("suite_id"), 10);
  const testrailOptions = {
    host: getInput("network_url"),
    user: getInput("username"),
    password: getInput("api_key"),
  };

  const testrailClient = new TestrailApiClient(testrailOptions);
  const testrailResults = await readFiles(reportFiles);

  if (isEmpty(testrailResults)) {
    setFailed("No Testrail results were found.");
    return;
  }

  testrailClient
    .getUserByEmail(testrailOptions.user)
    .then((userResponse) => {
      const { id: userId } = userResponse.body ?? {};

      const testRunOptions: INewTestRun = {
        suite_id: suiteId,
        // @ts-ignore because milestone is not required
        milestone_id: null,
        name: `[${environment}][${moment()
          .tz("America/New_York")
          .format("YYYY-MM-DD h:mm:ss")}] Automated Test Run`,
        description: "This test run was automatically generated by Github Actions.",
        include_all: true,
        assignedto_id: userId,
      };

      testrailClient
        .addRun(projectId, testRunOptions)
        .then((runResponse) => {
          const { id, untested_count } = runResponse?.body ?? {};

          testrailClient
            .addResultsForCases(id, testrailResults)
            .then(() => {
              if (testrailResults.length < untested_count) {
                testrailClient.updateRun(id, {
                  ...testRunOptions,
                  name: `${testRunOptions.name} [INCOMPLETE]`,
                });
              } else {
                testrailClient.closeRun(id);
              }

              setOutput("Completion time:", new Date().toTimeString());
              setOutput("Testrail run name:", testRunOptions.name);
            })
            .catch((error: any) => {
              setFailed(`Failed to add test case results to Testrail: ${extractError(error)}`);

              testrailClient.closeRun(id).catch((error: any) => {
                setFailed(`Failed to close the Testrail run: ${extractError(error)}`);
              });

              return;
            });
        })
        .catch((error: any) => {
          setFailed(`Failed to add a new Testrail run: ${extractError(error)}`);

          return;
        });
    })
    .catch((error: any) => {
      setFailed(`Failed to get Testrail user: ${extractError(error)}`);

      return;
    });
}

run();
